=head1 INSTALL ZEPPE-LIN

=head2 Supported Hardware / Requirements

Packages on the official B<rootfs> image are compiled with
optimization for x86-64 (AMD Athlon 64, Intel Core, Intel Atom) or
newer processors.  Do not try to install it on an i686 (Pentium Pro,
Celeron, Pentium-III) or lower processor, it simply will not work.

Since Zeppe-Lin is distributed in the form of a compiled tarball
containing a root filesystem, the installation requires a LiveCD with
any GNU/Linux.

=head2 Install From RootFS Image

This chapter describes how to install Zeppe-Lin on the UEFI LUKS
partition and LVM volume group, so make sure you have the following
packages installed on your LiveCD: C<parted>, C<dosfstools>,
C<cryptsetup>, C<lvm2>.

Let's go.

Boot from the LiveCD, open a terminal and get root privileges
(e.g. C<sudo su>).

=head3 Disk partitions

This is a quite simple partition scheme used in this handbook.  There
is a SCSI disk C</dev/sda>, but if you have an NVME disk
(like C</dev/nvme0n1>) or another SCSI disk (like C</dev/sdb>), its
simple as run C<sed 's/sda/sdb/g'>.

=begin man

.TS
center, box, tab (|) ;
l | l | l | l
l | l | l | l.
Partition|Filesystem|Size|Description
_
.SP
/dev/sda1|fat32|512MB|boot partition
/dev/sda2|luks|rest of the disk|luks partition
.TE

=end man

=begin html

  <table>
    <tr>
      <th>Partition</th>
      <th>Filesystem</th>
      <th>Size</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>/dev/sda1</td>
      <td>fat32</td>
      <td>512MB</td>
      <td>boot partition</td>
    </tr>
    <tr>
      <td>/dev/sda2</td>
      <td>luks</td>
      <td>rest of the disk</td>
      <td>luks partition</td>
    </tr>
  </table>

=end html

Using L<parted(8)> utility we can create all required partitions.

  # parted /dev/sda
  (parted) mklabel gpt
  (parted) mkpart ESP fat32 1MiB 513MiB
  (parted) set 1 boot on
  (parted) name 1 efi_part
  (parted) mkpart primary 513MiB 100%
  (parted) name 2 lvm_part
  (parted) quit

=head4 Boot partition filesystem

Create a FAT32 filesystem for the first (boot) partition:

  # mkfs.vfat -F32 /dev/sda1

=head4 Encrypt LUKS partition

Encrypt the second (luks) partition with LUKS and open the LUKS device:

  # cryptsetup luksFormat /dev/sda2
  # cryptsetup luksOpen /dev/sda2 crypt

=head3 LVM inside LUKS device

=head4 Create the physical volume

  # pvcreate /dev/mapper/crypt

=head4 Create the volume group

  # vgcreate zpln /dev/mapper/crypt

=head4 Create the logical volume

This is a quite simple logical volumes scheme used in this handbook.

=begin man

.TS
center, box, tab (|) ;
l | l | l | l
l | l | l | l.
Volume name | Filesystem | Size | Description
_
.SP
swap | swap | 2 * RAM | swap area
root | ext4 | rest of the disk | root fs
.TE

=end man

=begin html

  <table>
    <tr>
      <th>Volume name</th>
      <th>Filesystem</th>
      <th>Size</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>swap</td>
      <td>swap</td>
      <td>2 * RAM</td>
      <td>swap area</td>
    <tr>
      <td>root</td>
      <td>ext4</td>
      <td>rest of the disk</td>
      <td>root fs</td>
    </tr>
  </table>

=end html

To see the actual amount of RAM, type the following command:

  # free -m

For example, we have 4GB RAM.  The swap will have 8GB.  Let's create
the aforementioned two logical volumes:

  # lvcreate -L 8G -n swap zpln
  # lvcreate -l 100%FREE -n root zpln

=head3 Create root filesystem and setup swap area

  # mkfs.ext4 /dev/zpln/root
  # mkswap /dev/zpln/swap
  # swapon /dev/zpln/swap

=head3 Mount prepared partitions

In this handbook, the C</mnt> directory is used as a default
mountpoint.

  # mount /dev/zpln/root /mnt
  # mkdir /mnt/boot
  # mount /dev/sda1 /mnt/boot

=head3 Download rootfs tarball

  # cd /mnt
  # wget -c https://github.com/zeppe-lin/pkgsrc-core/releases/download/v0.99/rootfs-v0.99-x86_64.tar.xz{,.sig}

=head4 Signature verification

  # gpg --keyserver keyserver.ubuntu.com --recv-keys 59ec1986fbd902cf
  # gpg --verify rootfs-v0.99-x86_64.tar.xz.sig rootfs-v0.99-x86_64.tar.xz

=head3 Extract rootfs tarball

  # tar -xvf rootfs-v0.99-x86_64.tar.xz -C .

=head3 Chroot

Copy DNS configuration to have the availability to use the network
from the chrooted root:

  # cp /etc/resolv.conf etc/resolv.conf

Mount Linux's pseudo-filesystems:

  # mount -B /dev /mnt/dev
  # mount -B /tmp /mnt/tmp
  # mount -B /run /mnt/run
  # mount -t proc proc /mnt/proc
  # mount -t sysfs none /mnt/sys
  # mount -t devpts -o noexec,nosuid,gid=tty,mode=0620 devpts \
    /mnt/dev/pts

  (UEFI only)
  # mount -B /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars

  # chroot /mnt /bin/bash

Set the B<SHELL> variable to I</bin/bash> in the chrooted environment,
to be available to call C<:shell> in vim, for example.  This needs
if the shell used outside chroot is zsh, fish, or something else that
is not present in chroot environment.

=head3 Configure the base system configs

Set the root password:

  (chrooted) # passwd root

Make sure files have proper ownership and permissions:

  (chrooted) # chown root:root /
  (chrooted) # chmod 755 /

Prepare locale (add C<LANG=en_US.UTF-8> to F</etc/profile>):

  (chrooted) # localedef -i en_US -f UTF-8 en_US.UTF-8

Edit F</etc/fstab> to configure your filesystems
(add something like this):

  /dev/zpln/root  /      ext4  defaults,noatime,nodiratime  1 2
  /dev/sda1       /boot  vfat  defaults,noatime,nodiratime  1 2
  /dev/zpln/swap  swap   swap  defaults                     0 0

Note, you can use C</dev/disk/by-uuid/*> or C<UUID=xxx> instead of
C</dev/*> described above to prevent boot failures on machines with
multiple disks.  Use L<blkid(8)> to verify the disk's UUID.

Mount C</var/cache/pkgmk/work> (if you set to build packages in RAM),
and C</dev/shm>:

  (chrooted) # mount /var/cache/pkgmk/work
  (chrooted) # mount /dev/shm
  (chrooted) # mount /sys/firmware/efi/efivars
  (chrooted) # mount /tmp

Edit F</etc/rc.conf> to configure font, keyboard, timezone, hostname,
and services.  See L<rc.conf(5)> for more info.

Edit F</etc/rc.d/net>, F</etc/hosts>, and F</etc/resolv.conf> to
configure your network (IP address/Gateway/Hostname/Domain/DNS).  If
you want to configure the networking bridge, see F</etc/rc.d/bridge>.

It's better to add the ordinary user now if you want a specific user
id because the following installation of packages creates its own
users and they may occupy your id:

  (chrooted) # useradd --shell /bin/bash --create-home    \
    --groups wheel,audio,video,scanner,cdrom,input,users  \
    --uid 1000 --user-group $USERNAME
  (chrooted) # passwd $USERNAME

=head3 Prepare the package sources

Packages' sources are organized in so-called collections, see
L</"The pkgsrc collections"> for more information about that.

Clone the collections you need, but keep in mind that each subsequent
collection depends on the previous ones.

  (chrooted) # cd /usr/src/
  (chrooted) # git clone https://github.com/zeppe-lin/pkgsrc-core
  (chrooted) # git clone https://github.com/zeppe-lin/pkgsrc-system
  (chrooted) # git clone https://github.com/zeppe-lin/pkgsrc-xorg
  (chrooted) # git clone https://github.com/zeppe-lin/pkgsrc-desktop

Edit F</etc/pkgman.conf> and enable the collections you cloned.  By
default, only C<core> collection is enabled.  See L<pkgman.conf(5)>
for more information.

=head4 Update the core packages and configuration files

  (chrooted) # pkgman sysup --deps --depsort --group
  (chrooted) # rejmerge

=head3 Install bare metal packages

  (chrooted) # pkgman install --deps --group \
    cryptsetup e2fsprogs dosfstools grub2 grub2-efi iw gnupg lvm2 \
    pinentry wireless-tools wpa-supplicant dhcpcd iputils

Edit F</etc/rc.d/dhcpcd> and F</etc/rc.d/wpa_supplicant> if needed.
If you configured the networking bridge, don't forget to specify the
bridge interface to B<dhcpcd> and/or B<wpa_supplicant> RC files.

=head3 Install the kernel

=head4 Install the kernel package

C<system> pkgsrc collection provides a package with the kernel and
non-free firmware:

  (chrooted) # pkgman install --deps --group \
    --config-append="runscripts no" linux linux-firmware

The B<linux> package has a B<post-install> script that executes
L<mkinitramfs(8)> and updates the B<grub> config.  We turn off the
execution of this script because we'll do it manually.  It is useful
when regularly updating the system.

Also, you may want to lock the B<linux> package and not update it
during regular system updates, since the update will remove the
current working kernel and its modules.  If you plan not to turn off
the computer for a long time, it is better to do this and update the
kernel separately, through L<pkgman-update(8)>.  See L<pkgman-lock(8)>
for more information about package locking.

If you installed the kernel package through a package manager, you can
jump over the next paragraph, to the L</"Install mkinitramfs">.

=head4 Install the kernel manually

Since the L<pkgman(1)> build the package that contains only the
binaries (kernel and modules), you may want to build your own kernel.
For example, you do not need such a fat kernel, which goes by default,
or you need the sources of the running kernel because you want to
build the Nvidia driver and/or VirtualBox.

In this case, it is recommended to use the kernel from package sources.

So, let's download the B<linux> source:

  (chrooted) # pkgman install -do linux

The C<-do> option means C<download-only>.  The source is downloaded
to F</var/cache/pkgmk/sources> if you have not changed the
F<PKGMK_SOURCE_DIR> location in F</etc/pkgmk.conf>.  Unpack it:

  (chrooted) # tar -xvf /var/cache/pkgmk/sources/linux-5.4.X.tar.?z \
    -C /usr/src/

You may want to enable Zeppe-Lin's patches:

  (chrooted) # cd linux-5.4.X
  (chrooted) # for p in $(pkgman path linux)/*.patch; do \
    patch -Np1 -i $p; done

If you have downloaded a non-packaged kernel, you can print the
results of applying the patches without actually changing any files.
Just add C<--dry-run> option.

Next, you can create your own, minimal config and adjust it to your
system:

  (chrooted) # make menuconfig

Or you can use the C<all-inclusive> config from the package:

  (chrooted) # cp $(pkgman path linux)/x86_64-dotconfig .config
  (chrooted) # make olddefconfig

Build the kernel and modules:

  (chrooted) # make -j$(nproc) all

Install the kernel and modules:

  (chrooted) # KV=$(make kernelversion)
  (chrooted) # cp arch/x86/boot/bzImage /boot/vmlinuz-$KV
  (chrooted) # cp .config /boot/config-$KV
  (chrooted) # make modules_install

You may still need to install the kernel non-free firmwares:

  (chrooted) # pkgman install --deps linux-firmware

Next, we need to prepare the initramfs and update our bootloader.

=head3 Install mkinitramfs

  (chrooted) # pkgman install --deps mkinitramfs

Add the B<mkinitramfs> configuration file (F</etc/mkinitramfs/config>)
with the following content:

  #
  # /etc/mkinitramfs/config: mkinitramfs(8) configuration
  #
  # See mkinitramfs.config(5) for more information.
  #

  hostonly=1 #(optional)
  compress="gzip --fast"
  hooks="eudev luks lvm resume"
  root=/dev/zpln/root
  root_type=ext4
  resume=/dev/zpln/swap
  luks_name=crypt
  luks_root=/dev/sda2

  # End of file.

See L<mkinitramfs.config(5)> for more information.

Note that you can use C</dev/disk/by-uuid/*> instead of C</dev/*>
paths to prevent boot hanging in case you have multiple drives on the
machine.  Use L<blkid(8)> to obtain C<UUID>.

Now, prepare an initramfs.  If you installed the C<linux> kernel
manually, you have already set C<KV> set.  Else, type:

  (chrooted) # KV=$(pkgman printf "%v" --filter=linux)

Now, generate an initramfs image:

  (chrooted) # mkinitramfs -o /boot/initramfs-$KV.img -k $KV

=head3 Configure GRUB

Create F</etc/default/grub> file with the following content:

  GRUB_TIMEOUT=3
  GRUB_DISTRIBUTOR=ZPLN
  GRUB_CMDLINE_LINUX_DEFAULT="quiet resume=/dev/zpln/swap"

Next, install B<GRUB>:

  (chrooted) # grub-install --target=x86_64-efi \
    --efi-directory=/boot /dev/sda

Update B<GRUB> configuration file:

  (chrooted) # grub-mkconfig -o /boot/grub/grub.cfg

=head3 Exit from chroot and umount /mnt and reboot

  (chrooted) # exit
  # cd /
  # umount -R /mnt
  # shutdown -r now

=head2 Post Installation Notes

=head3 Install xorg

See the available Xorg video and input drivers, and choose the right
one:

  # pkgman search -vv xf86-

Next, install B<xorg> and the drivers you wish:

  # pkgman install --deps --group xorg ...

=cut
