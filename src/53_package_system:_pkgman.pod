=head2 Package Management Frontend: pkgman

In its current form B<pkgutils> does not have a concept of dependency
handling.  To address this, a front-end utility called B<pkgman>
exists.  L<pkgman(1)> supports dependency handling (with the caveat
mentioned below) as well as some overlap with B<pkgutils> features.

=head3 Functionality

Some examples of pkgman's functionality and use are as follows:

=head4 Listing installed packages

    $ pkgman list
    acl
    attr
    [...]

    $ pkgman list -v
    acl 2.3.1-1
    attr 2.5.1-1
    [...]

    $ pkgman list -vv
    acl 2.3.1-1: Access Control List filesystem support
    attr 2.5.1-1: Extended attribute support library for ACL support
    [...]

=head4 Querying information about a package source

    $ pkgman info acl
    Name:         acl
    Path:         /usr/src/pkgsrc-core
    Version:      2.3.1
    Release:      1
    Description:  Access Control List filesystem support
    URL:          http://savannah.nongnu.org/projects/acl
    Dependencies: attr

=head4 Searching for packages sources by name

    $ pkgman search -vv glibc
    -- search ([i] = installed)
    [i] glibc 2.32-5: GNU C Library
    [i] glibc-32 2.32-5: GNU C Library (32bit)

    $ pkgman search -vv --regex '^(glib)c?$'
    -- search ([i] = installed)
    [i] glib 2.70.1-1: Common C routines used by Gtk+ and other libs
    [i] glibc 2.32-5: GNU C Library

=head4 Searching for packages sources by words in their description

    $ pkgman dsearch -vv archive
    -- search ([i] = installed)
    [i] cpio 2.13-2: Copy files into or out of a cpio or tar archive
    [i] libarchive 3.5.2-1: Multi-format archive and compression library
    [ ] unrar 6.0.7-1: Extracts RAR archives
    [ ] zip 3.0-1: Compression and file packaging/archive utility

=head4 Viewing dependency lists

    $ pkgman dep bash
    readline

    $ pkgman dep bash --recursive
    readline
     ncurses

    $ pkgman dep bash --recursive --tree -vv
    -- dependencies ([i] = installed, --> seen before)
    [i] bash 5.1.8-1: GNU Bourne Again Shell
    [i]   readline 8.1.1-1: Lets users edit command lines as they are typed in
    [i]     ncurses 6.3-1: System V Release 4.0 curses emulation library

=head4 Installing packages

    $ pkgman install --deps xterm

Note, that the C<install> command B<DOES NOT> process dependencies
without B<--deps> option, and it's usually recommended to use
B<--deps> with C<install>.  It is also worth noting that L<pkgman(1)>
by default tries to install all the packages specified in the
dependencies, and if one of the dependencies does not build, it will
skip it, and go further.  In the end, it will show the C<build-failed
packages> in the report.  This behavior can have unexpected
consequences if you install many programs with many dependencies at a
time.  Because, one dependency may not build, and affect the building
of another dependency, and thereby affect the third, etc.

We can tell L<pkgman(1)> not to skip the fails, but to stop.  Then
we can fix the package build and start installation further.

There is an option B<--group> for this.  In this handbook, it is
recommended to use it always, unless you know what you are doing.

    $ pkgman install --deps --group xterm

In case one of the dependency builds has failed, just fix it and
retry:

    $ pkgman install --deps --group --force xterm

The option B<--force> tell to L<pkgman(1)> to skip installation of
already installed package(s).  It just ignores the package and
installs next in the listed order.  At the end of the installation
procedure, all skipped packages will be in the report.

=head4 Viewing and updating outdated packages

Since the packages sources for Zeppe-Lin are distributed via
L<git(1)>, the first thing to do is to update the C<pkgsrc>
collections:

    $ git -C /usr/src/pkgsrc-core    pull
    $ git -C /usr/src/pkgsrc-system  pull
    $ git -C /usr/src/pkgsrc-xorg    pull
    $ git -C /usr/src/pkgsrc-desktop pull

It's maybe annoying to do these few steps every time you want to
synchronize C<pkgsrc> repositories.  If so, just add these steps to
your L<crond(8)> daemon and synchronize your local repos once a week,
for example.

Listing installed packages that are out of date
(including their new dependencies):

    $ pkgman diff --deps --full
    -- Differences between installed packages and packages' sources
    Package                         Installed           Available

    bind                            9.16.7-1            9.16.8-1
    bindutils                                           9.16.8-1

    --
    1 update, 1 install

Updating an individual package:

    $ pkgman update --deps --group bind

Updating all installed packages:

    $ pkgman sysup --deps --depsort --group

=head3 Configuration

pkgman's main configuration file, F</etc/pkgman.conf>, contains
options that can be used to change pkgman's behavior.  Notably in
this file, the following options can be configured:

=over 4

=item B<pkgsrcdir>

This option can occur multiple times and specifies a directory with a
packages' sources "collection" which L<pkgman(1)> should check in its
operation.  By default, the I<core> collection is enabled, but
I<system>, I<xorg>, I<desktop>, and I<stuff> collections are
commented.

=item B<runscripts>

This option configures L<pkgman(1)> to run C<pre-install>,
C<post-install>, C<pre-remove>, and C<post-remove> scripts if they
exist in the package source directory.  These scripts are run during
F<install>, F<update>, F<sysup>, and F<remove> operations.

It is recommended that this be enabled as in many cases if these
scripts exist in a package source directory, it is required to be
run for proper operation.

=item B<logfile>

This option configures a file for pkgman to log its operation if
desired.

=back

This is B<NOT> an exhaustive list of all of pkgman's commands,
features, and configuration options, merely a starting point.  More
information can be found in L<pkgman(1)> and L<pkgman.conf(5)>.

=cut

# vim: sw=4 ts=4 sts=4 et cc=72 tw=70
