=head2 6.2. Using The Pkgsrc

=head3 B<6.2.1. Synchronizing your local pkgsrc repository>

When Zeppe-Lin is installed for the first time there are no local
pkgsrc collections (F<usr/src/pkgsrc*>).  To obtain the collection
you need the first time, use C<git clone>.  Example:

    # cd /usr/src/
    # git clone https://github.com/zeppe-lin/pkgsrc-core
    # git clone https://github.com/zeppe-lin/pkgsrc-system
    # git clone https://github.com/zeppe-lin/pkgsrc-xorg
    # git clone https://github.com/zeppe-lin/pkgsrc-desktop

Edit F</etc/pkgman.conf> and enable the collections you cloned.  By
default, only C<core> collection is enabled.  See L<pkgman.conf(5)>
for more information.

To bring your local C<core> collection up to date use C<git pull>.
Example:

    # git -C /usr/src/pkgsrc-core     pull
    # git -C /usr/src/pkgsrc-system   pull
    # git -C /usr/src/pkgsrc-xorg     pull
    # git -C /usr/src/pkgsrc-desktop  pull

Depending on what collections you already have.

It's maybe annoying to do these few steps every time you want to
synchronize C<pkgsrc> repositories.  If so, just add these steps to
your L<crond(8)> daemon and sync your local repos once a week, for
example.

=begin comment

TODO: add example!

=end comment

=head3 B<6.2.2. Listing local pkgsrc repositories>

When the local pkgsrc repositories have been cloned/updated the
directory C</usr/src/> will contain some C<pkgsrc-???> directories.

Under each of these directories, you will find packages' sources:
build scripts and files for building binary packages.  You can simply
browse around in the directory structure to find out which packages'
sources are available.  Let's take C<pkgsrc-core> as an example:

    $ cd /usr/src/pkgsrc-core
    $ ls -p
    acl/              gcc/           libpcre/          psmisc/
    asciidoctor/      gdbm/          libpcre2/         py3-setuptools/
    attr/             gettext-tiny/  libpipeline/      python3/
    autoconf/         git/           libtirpc/         rc/
    automake/         glibc/         libtool/          rdate/
    bash/             glibc-32/      libunistring/     readline/
    bash-completion/  gperf/         libusb/           README.md
    bc/               grep/          libyaml/          rejmerge/
    binutils/         groff/         linux-pam/        revdep/
    bison/            gzip/          lz4/              ruby/
    bzip2/            hdparm/        lzo/              samurai/
    ca-certificates/  iana-etc/      m4/               sed/
    capstone/         inetutils/     make/             shadow/
    cmake/            intltool/      Makefile          sqlite3/
    COPYING           iproute2/      man-db/           start-stop-daemon/
    COPYRIGHT         iptables/      man-pages/        sudo/
    coreutils/        kbd/           man-pages-posix/  sysfsutils/
    cpio/             kmod/          meson/            sysklogd/
    curl/             less/          mlocate/          sysvinit/
    dash/             libarchive/    mpdecimal/        tar/
    db/               libbsd/        nasm/             tzdata/
    dcron/            libcap/        ncurses/          usbids/
    diffutils/        libcap-ng/     openssh/          usbutils/
    ed/               libdevmapper/  openssl/          util-linux/
    elfutils/         libffi/        p5-xml-parser/    vim/
    eudev/            libgmp/        patch/            wget/
    expat/            libmd/         pciutils/         which/
    fakeroot/         libmnl/        perl/             xz/
    file/             libmpc/        pkg-config/       zlib/
    filesystem/       libmpfr/       pkgman/           zstd/
    findutils/        libnfnetlink/  pkgmk/
    flex/             libnftnl/      pkgutils/
    gawk/             libnsl/        procps/
    $

You can also use L<pkgman(1)> with command B<list> and option B<--all>
to list all local packages' sources.  Example:

    $ pkgman list --all
    -- list ([i] = installed)
    [i] acl
    [i] alsa-lib
    [ ] alsa-ucm-conf
    [i] alsa-utils
    ...

=over

=item B<Note>:

B<pkgman> will list the packages' sources from all C<pkgsrc>
collections indicated in F</etc/pkgman.conf> as C<pkgsrcdir>.

=back

Add the B<--path> option to see the package source location:

    $ pkgman list --all --path
    -- list ([i] = installed)
    [i] /usr/src/pkgsrc-core/acl
    [i] /usr/src/pkgsrc-system/alsa-lib
    [ ] /usr/src/pkgsrc-system/alsa-ucm-conf
    [i] /usr/src/pkgsrc-system/alsa-utils

If you are looking for a specific package source, it might be easier
to use B<search> command instead of C<list | grep>:

    $ pkgman search --path alsa
    -- search ([i] = installed)
    [i] /usr/src/pkgsrc-system/alsa-lib
    [ ] /usr/src/pkgsrc-system/alsa-ucm-conf
    [i] /usr/src/pkgsrc-system/alsa-utils

=head3 B<6.2.3. Listing version differences>

To find out if the B<pkgsrc> repository carries packages that are
different (likely newer) compared to the versions currently installed
you can use L<pkgman-diff(1)>.  If versions differences are found, the
output could look like this:

    $ pkgman diff --deps --full

    -- Differences between installed packages and packages sources tree
    Package                         Installed           Available

    aircrack-ng-scm                 20211113-1          20211121-1
    cowpatty                        4.8-1               4.8-2
    feh                             3.7.2-1             3.7.2-2
    joomscan-scm                    20211112-1          20211121-1
    trinity-extra-theme             0.4-3cc4340-2       0.1-1
    handbook                        0.3-1               0.3.1-1

    -- Packages which was not found in the packages sources tree
    Package                         Installed           Required by

    libncurses5-compat                                  android-ndk-bin

    --
    6 updates

The option B<--deps> calculates the new dependencies for available
packages.  The option B<--full> shows the table above, not just the
list of packages.

Pay attention to C<trinity-extra-theme> package.  The available
package has a lower version than the installed one.  You can use
B<--config-set>="preferhigher yes" to prefer higher installed
versions over lower packages, overwriting default B<preferhigher>
configuration settings.

If no version differences were found, i.e. the system is in sync with
the packages sources structure, the output will simply be:

    $ pkgman diff
    No differences found

=head3 B<6.2.4. Building and installing packages>

=over

=item B<Note>:

The recommended way is to use L<pkgman-install(8)>.  Here we will only
describe the steps to better understand the build process.

=back

Once you have found a package that you want to build and install you
simply go into the desired package source directory and use
L<pkgmk(8)> to build it.  Example:

    # cd /usr/src/pkgsrc-core/gawk
    # pkgmk -d

The B<-d> option means download missing source files and tells
L<pkgmk(8)> to download the source(s) specified in F<Pkgfile> (in case
the source files are already downloaded this option is ignored).  When
the download is completed the package will be built.

=begin man

.TS
center, box, tab (|) ;
c
c.
<WARNING>
_
.SP
It is often not a good idea to build the packages with
root privileges.  Some recipes for building programs
(Makefiles, etc) may not be written correctly, and
overwrite system files.
.TE

=end man

=begin html

    <table>
        <tr>
            <th>WARNING</th>
        </tr>

        <tr>
            <td>
                It is often not a good idea to build the packages with
                root privileges.  Some recipes for building programs
                (Makefiles, etc) may not be written correctly, and
                overwrite system files.
            </td>
        </tr>
    </table>

=end html

=begin text

=over

=item B<Warning>:

It is often not a good idea to build the packages with root
privileges.  Some recipes for building programs (Makefiles, etc) may
not be written correctly, and overwrite system files.

=back

=end text

If you will build packages with non-root privileges, the installed
files will have user permissions.  This is wrong, both in terms of
security and distribution of these packages.  It is better to use
L<fakeroot(1)>, to run L<pkgmk(8)> in an environment faking root
privileges.  Example:

    $ fakeroot pkgmk -d

The L<pkgman(1)> already uses it in the default Zeppe-Lin
distribution.

If the package was built successfully you can use L<pkgadd(8)> to
install or upgrade it.  Example:

    # pkgadd gawk#3.1.5-3.pkg.tar.gz

=head3 B<6.2.5. Build packages as an unprivileged user>

It is already done in the default Zeppe-Lin distribution.  The
packages C<core/filesystem>, C<core/pkgmk>, and C<core/pkgman> have
corresponding configurations.  However, it does not hurt to describe
how to achieve this, so that you will know how it is done in
Zeppe-Lin or if you would like to adjust default settings.

First, add a new user (C<pkgmk> for example):

    # useradd -b /var/cache/ -m -s /bin/false -U pkgmk

This command will create the user C<pkgmk> and the group with the same
name, with F</var/cache/pkgmk> as the home directory and F</bin/false>
as the default shell.

Second, add the directories required for L<pkgmk(8)> to build the
packages and set user C<pkgmk> (which we created previously) as their
owner:

    # mkdir -p /var/cache/pkgmk/{sources,packages,work}
    # chown -R pkgmk:pkgmk /var/cache/pkgmk/{sources,packages,work}

Third, specify these directories in F</etc/pkgmk.conf>, so that when
you call L<pkgmk(8)>, these directories will be used.

    PKGMK_SOURCE_DIR=/var/cache/pkgmk/sources
    PKGMK_PACKAGE_DIR=/var/cache/pkgmk/packages
    PKGMK_WORD_DIR=/var/cache/pkgmk/work/$name-$$

Fourth, tell L<pkgman(1)> to call L<pkgmk(8)> on behalf of C<pkgmk>
user.  To do that, edit variable C<makecommand> in the
F</etc/pkgman.conf> file as the following:

    makecommand sudo -H -u pkgmk fakeroot pkgmk

=head3 B<6.2.6. Renice pkgmk's child process>

If you keep using your computer while compiling packages you will
notice that your box is much less responsive than usual.  This is
caused by having two C<groups> of processes with the same nice
priority: your usual running tasks on one side, and L<pkgman(1)> (and
its child processes) on the other.  Now, if you could renice
L<pkgman(1)> and its children to a higher nice (i.e. lower priority!)
value (default is 0), compiling would inevitably take somewhat longer,
but you could use your workstation without noticing much difference to
its usual performance.

Just set up the C<makecommand> in the F</etc/pkgman.conf> to something
like this:

    makecommand sudo -H -u pkgmk nice -n10 ionice -c2 -n6 fakeroot pkgmk

=head3 B<6.2.7. Build in ram>

By default, Zeppe-Lin already has C<pkgmk> user and F</etc/fstab>'s
entry for this.  Just edit F</etc/fstab>'s C<pkgmk> entry, remove
C<-pipe> from F</etc/pkgmk.conf>, and type C<mount pkgmk>.

Below is described how this was done in Zeppe-Lin.

Find your user id for pkgmk:

    $ id pkgmk

Edit F</etc/fstab>:

Add the following line to F</etc/fstab>

    pkgmk /var/cache/pkgmk/work tmpfs size=<SIZE>,uid=<UID>,defaults 0 0

The C<SIZE> is the memory size for F</var/cache/pkgmk/work>.  Add the
postfix C<M> for megabytes, or C<G> for gigabytes.  Example: C<16G>.

The C<UID> is the C<pkgmk>'s user id.

Mount the tmpfs:

    # mount pkgmk

Edit F</etc/pkgmk.conf>:

Set where you put your RAM file system from F</etc/fstab> file:

    PKGMK_WORK_DIR="/var/cache/pkgmk/work/$name"

Remove C<-pipe> from all your C<CFLAGS> and C<CXXFLAGS>.

=cut

# vim: sw=4 ts=4 sts=4 et cc=72 tw=70
